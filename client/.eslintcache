[{"/home/mohamed/Documents/Big_Finally/client/src/index.js":"1","/home/mohamed/Documents/Big_Finally/client/src/App.js":"2","/home/mohamed/Documents/Big_Finally/client/src/js/store.js":"3","/home/mohamed/Documents/Big_Finally/client/src/Components/Admin Component/Sidebar Component/Sidebar.js":"4","/home/mohamed/Documents/Big_Finally/client/src/Components/Admin Component/Sidebar Component/SidebarItems.js":"5","/home/mohamed/Documents/Big_Finally/client/src/js/reducers/index.js":"6","/home/mohamed/Documents/Big_Finally/client/src/Contents/Data/MenuItems.js":"7","/home/mohamed/Documents/Big_Finally/client/src/js/reducers/questionreducer.js":"8","/home/mohamed/Documents/Big_Finally/client/src/js/reducers/quizreducer.js":"9","/home/mohamed/Documents/Big_Finally/client/src/Components/Admin Component/Views/Question Component/Question.js":"10","/home/mohamed/Documents/Big_Finally/client/src/Components/Admin Component/Views/Quizzes Component/Quizzes.js":"11","/home/mohamed/Documents/Big_Finally/client/src/Components/Admin Component/Views/Admin Profil Component/Adminprofil.js":"12","/home/mohamed/Documents/Big_Finally/client/src/Components/Admin Component/Views/Sign Up Component/Signup.js":"13","/home/mohamed/Documents/Big_Finally/client/src/js/actionType.js":"14","/home/mohamed/Documents/Big_Finally/client/src/Components/Admin Component/Views/Question Component/Tableitem.js":"15","/home/mohamed/Documents/Big_Finally/client/src/js/actions/quizaction.js":"16","/home/mohamed/Documents/Big_Finally/client/src/js/actions/questionaction.js":"17"},{"size":289,"mtime":1610973949984,"results":"18","hashOfConfig":"19"},{"size":406,"mtime":1611313120508,"results":"20","hashOfConfig":"19"},{"size":328,"mtime":1610988242192,"results":"21","hashOfConfig":"19"},{"size":4284,"mtime":1611175709962,"results":"22","hashOfConfig":"19"},{"size":538,"mtime":1611172818187,"results":"23","hashOfConfig":"19"},{"size":221,"mtime":1611189671101,"results":"24","hashOfConfig":"19"},{"size":1742,"mtime":1611178471793,"results":"25","hashOfConfig":"19"},{"size":455,"mtime":1611081717775,"results":"26","hashOfConfig":"19"},{"size":440,"mtime":1611237298810,"results":"27","hashOfConfig":"19"},{"size":10751,"mtime":1611314560368,"results":"28","hashOfConfig":"19"},{"size":11345,"mtime":1611237970569,"results":"29","hashOfConfig":"19"},{"size":4314,"mtime":1610900783428,"results":"30","hashOfConfig":"19"},{"size":3293,"mtime":1610901227230,"results":"31","hashOfConfig":"19"},{"size":166,"mtime":1611229905898,"results":"32","hashOfConfig":"19"},{"size":1134,"mtime":1611176554539,"results":"33","hashOfConfig":"19"},{"size":982,"mtime":1611233816881,"results":"34","hashOfConfig":"19"},{"size":1012,"mtime":1611229943011,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"5xz1k4",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/home/mohamed/Documents/Big_Finally/client/src/index.js",[],["73","74"],"/home/mohamed/Documents/Big_Finally/client/src/App.js",[],"/home/mohamed/Documents/Big_Finally/client/src/js/store.js",[],"/home/mohamed/Documents/Big_Finally/client/src/Components/Admin Component/Sidebar Component/Sidebar.js",[],"/home/mohamed/Documents/Big_Finally/client/src/Components/Admin Component/Sidebar Component/SidebarItems.js",[],"/home/mohamed/Documents/Big_Finally/client/src/js/reducers/index.js",[],"/home/mohamed/Documents/Big_Finally/client/src/Contents/Data/MenuItems.js",[],"/home/mohamed/Documents/Big_Finally/client/src/js/reducers/questionreducer.js",[],"/home/mohamed/Documents/Big_Finally/client/src/js/reducers/quizreducer.js",[],"/home/mohamed/Documents/Big_Finally/client/src/Components/Admin Component/Views/Question Component/Question.js",["75","76"],"import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./Question.css\";\nimport Tableitem from \"./Tableitem\";\n\nimport {\n  getQuestions,\n  editQuestionById,\n  addQuestion,\n} from \"../../../../js/actions/questionaction\";\n\nexport default function Question() {\n  //useSelector pou consommer state depuis store\n  const { isLoading, questions } = useSelector((state) => state.quests);\n\n  // appeller useDispatch pour utiliser la fonction dispatch\n  const dispatch = useDispatch();\n  const getAllQuestions = () => dispatch(getQuestions());\n  const addNewQuestion = (inputData) => dispatch(addQuestion(inputData));\n\n  useEffect(() => {\n    getAllQuestions();\n  }, []);\n\n  const [addQuest, setAddQuest] = useState(false);\n  const [isModif, setIsModif] = useState(false);\n  const [form, setForm] = useState({\n    category: \"\",\n    type: \"\",\n    difficulty: \"\",\n    question: \"\",\n    correct_answer: \"\",\n    incorrect_answers: [\"\", \"\", \"\"],\n  });\n\n  const categoryList = [...new Set(questions.map((el) => el.category))];\n  // choisir une categorie\n  const handleChangeSelectCatg = (e) => {\n    setForm({\n      category: e.target.value,\n      type: \"\",\n      difficulty: \"\",\n      question: \"\",\n      correct_answer: \"\",\n      incorrect_answers: [\"\", \"\", \"\"],\n    });\n  };\n  // filtrer les quests qui appartiennent a la categ selectionner\n  const questionsFiltred = questions.filter(\n    (question) => question.category === form.category\n  );\n\n  // edit Question  Section\n  const handleChangeEdit = (id) => {\n    const questEdit = questions.find((el, j) => el._id === id);\n    setForm(questEdit);\n    setIsModif(true);\n  };\n\n  // MAJ Quest\n  const handleChangeInput = (e) => {\n    const incorrect_answers = form.incorrect_answers;\n    switch (e.target.name) {\n      case \"category\":\n        setForm({ ...form, category: e.target.value });\n        break;\n      case \"question\":\n        setForm({ ...form, question: e.target.value });\n        break;\n      case \"opt1\":\n        incorrect_answers[0] = e.target.value;\n        setForm({ ...form, incorrect_answers: incorrect_answers });\n        break;\n      case \"opt2\":\n        incorrect_answers[1] = e.target.value;\n        setForm({ ...form, incorrect_answers: incorrect_answers });\n        break;\n      case \"opt3\":\n        incorrect_answers[2] = e.target.value;\n        setForm({ ...form, incorrect_answers: incorrect_answers });\n        break;\n      case \"opt4\":\n        setForm({ ...form, correct_answer: e.target.value });\n        break;\n      case \"difficulty\":\n        setForm({ ...form, difficulty: e.target.value });\n        break;\n      default:\n        setForm({ ...form, type: e.target.value });\n    }\n  };\n  const editQuest = (id, formData) => dispatch(editQuestionById(id, formData));\n  const handleChangeSubmit = (e) => {\n    e.preventDefault();\n    !addQuest ? editQuest(form._id, form) : addNewQuestion(form);\n    setIsModif(false);\n  };\n\n  const handleChangeAdd = () => {\n    setForm({\n      category: \"\",\n      type: \"\",\n      difficulty: \"\",\n      question: \"\",\n      correct_answer: \"\",\n      incorrect_answers: [\"\", \"\", \"\"],\n    });\n    setIsModif(true);\n    setAddQuest(true);\n  };\n\n  return (\n    <Container className=\"question-container\">\n      <Row>\n        <Col sm={6} className=\"Details-container\">\n          <div className=\"card my-1\">\n            <div className=\"card-header\">\n              <h5 className=\"card-title\">\n                {!addQuest ? \"Edit Question\" : \"Add Question\"}{\" \"}\n              </h5>\n            </div>\n            <div className=\"card-body\">\n              <form className=\"row\">\n                <div className=\"col-7\">\n                  <label className=\"form-label\"> category List :</label>\n                  <select\n                    name=\"category\"\n                    className=\"form-select mb-3\"\n                    onChange={(e) => handleChangeSelectCatg(e)}\n                    value={form.category}\n                  >\n                    <option>Open this select menu</option>\n                    {categoryList.map((category, i) => (\n                      <option key={i}>{category}</option>\n                    ))}\n                  </select>\n                </div>\n              </form>\n              <form className=\"row\">\n                <div className=\"col-8 mb-1\">\n                  <label className=\"form-label\">Question :</label>\n                  <input\n                    type=\"text\"\n                    name=\"question\"\n                    className=\"form-control\"\n                    value={form.question}\n                    disabled={isModif ? false : true}\n                    onChange={(e) => handleChangeInput(e)}\n                  />\n                </div>\n\n                <div className={addQuest ? \"d-none\" : \"col-4 mb-2\"}>\n                  <label className=\"form-label\">Question ID :</label>\n                  <input\n                    type=\"text\"\n                    name=\"_id\"\n                    className=\"form-control\"\n                    value={form._id}\n                    disabled={addQuest ? false : true}\n                    onChange={(e) => handleChangeInput(e)}\n                  />\n                </div>\n              </form>\n              <form className=\"row\">\n                <div className=\"col-12\">\n                  <label className=\"form-label\">Options :</label>\n                  <div className=\"row g-3 my-1\">\n                    <div className=\"col input-group\">\n                      <span className=\"input-group-text\" id=\"basic-addon1\">\n                        Opt :\n                      </span>\n                      <input\n                        type=\"text\"\n                        name=\"opt1\"\n                        className=\"form-control\"\n                        value={form.incorrect_answers[0]}\n                        disabled={isModif ? false : true}\n                        onChange={(e) => handleChangeInput(e)}\n                      />\n                    </div>\n                    <div className=\"input-group col\">\n                      <span className=\"input-group-text\" id=\"basic-addon1\">\n                        Opt :\n                      </span>\n                      <input\n                        type=\"text\"\n                        name=\"opt2\"\n                        className=\"form-control\"\n                        value={form.incorrect_answers[1]}\n                        disabled={isModif ? false : true}\n                        onChange={(e) => handleChangeInput(e)}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"row g-3 my-2\">\n                    <div className=\"input-group col\">\n                      <span className=\"input-group-text\" id=\"basic-addon1\">\n                        Opt :\n                      </span>\n                      <input\n                        type=\"text\"\n                        name=\"opt3\"\n                        className=\"form-control\"\n                        value={form.incorrect_answers[2]}\n                        disabled={isModif ? false : true}\n                        onChange={(e) => handleChangeInput(e)}\n                      />\n                    </div>\n                    <div className=\" input-group col\">\n                      <span className=\"input-group-text\" id=\"basic-addon1\">\n                        Opt :\n                      </span>\n                      <input\n                        type=\"text\"\n                        name=\"opt4\"\n                        className=\"form-control is-valid\"\n                        value={form.correct_answer}\n                        disabled={isModif ? false : true}\n                        onChange={(e) => handleChangeInput(e)}\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div className=\"col-md-6 mb-2\">\n                  <label className=\"form-label\">Difficulty :</label>\n                  <input\n                    type=\"text\"\n                    name=\"difficulty\"\n                    className=\"form-control\"\n                    value={form.difficulty}\n                    disabled={isModif ? false : true}\n                    onChange={(e) => handleChangeInput(e)}\n                  />\n                </div>\n                <div className=\"col-md-4 mb-2\">\n                  <label className=\"form-label\">Type :</label>\n                  <input\n                    type=\"text\"\n                    name=\"type\"\n                    className=\"form-control\"\n                    value={form.type}\n                    disabled={addQuest ? false : true}\n                    onChange={(e) => handleChangeInput(e)}\n                  />\n                </div>\n\n                <div className=\"col-md-8 mb-3\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-outline-dark\"\n                    onClick={handleChangeSubmit}\n                  >\n                    {addQuest ? \"ADD\" : \"UPDATE\"}\n                  </button>\n                </div>\n                <div className=\"col-md-4 mb-3 d-flex justify-content-end\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-dark border-0\"\n                    onClick={handleChangeAdd}\n                  >\n                    <FontAwesomeIcon size=\"2x\" icon={faPlusCircle} />\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </Col>\n        <Col sm={5} className=\"list-container\">\n          <table className=\"table my-2 w-75\">\n            <thead className=\"thead-dark\">\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Question</th>\n                <th scope=\"col\">Difficulty</th>\n                <th scope=\"col\">Category</th>\n                <th scope=\"col\">Management</th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-light\">\n              {form.category === \"\"\n                ? null\n                : questionsFiltred.map((question, j) => (\n                    <Tableitem\n                      key={question._id}\n                      question={question}\n                      j={j}\n                      handleChangeEdit={handleChangeEdit}\n                      // handleChangeEdit={handleChangeEdit}\n                    />\n                  ))}\n            </tbody>\n          </table>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","/home/mohamed/Documents/Big_Finally/client/src/Components/Admin Component/Views/Quizzes Component/Quizzes.js",["77","78","79"],"import React, { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusCircle, faTimesCircle, faEdit,faPlus} from '@fortawesome/free-solid-svg-icons';\nimport Popover from \"react-bootstrap/Popover\"\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\nimport Button from \"react-bootstrap/Button\"\n\n\n\nimport \"./Quizzes.css\";\n\n\nimport { getQuizzes,editQuizById,addQuiz,removeQuiz } from '../../../../js/actions/quizaction'\nimport { getQuestions} from '../../../../js/actions/questionaction'\n\nexport default function Quizzes() {\n\n    const [isModif, setIsModif] = useState(false)\n    const [addQuest, setAddQuest] = useState(false)\n   \n\n    const { isLoading, quizzes } = useSelector(state => state.qs)\n    const { questions } = useSelector(state => state.quests)\n    const dispatch = useDispatch();\n    const getAllQuizzes = () => dispatch(getQuizzes())\n    const getAllQuestions = () => dispatch(getQuestions())\n    const [form, setForm] = useState({\n        name: \"\",\n        category: \"\",\n        Questions: []\n    })\n\n    const categoryList =[...new Set(questions.map((el)=>el.category))]\n    // filtrer les quests qui appartiennent a la categ selectionner\n    const questionsFiltred = questions.filter((question)=>question.category===form.category)\n\n    useEffect(() => {\n        getAllQuizzes()\n    }, [])\n    useEffect(() => {\n        getAllQuestions()\n    }, [isModif])\n\n\n    \n\n\n\n    const handleChangeEdit = (id) => {\n        setIsModif(true)\n        const quizSelected = quizzes.find((el) => el._id === id)\n        setForm(quizSelected);\n    }\n    const handleChangeAddQuest = (id)=>{\n        const questionSelected = questions.find((el) => el._id === id)\n        setForm({...form,Questions:[...form.Questions,questionSelected]})\n    }\n    const handleChangeInput =(e)=>{\n        switch(e.target.name){\n            case \"category\":\n            setForm({...form,category:e.target.value});    \n            break;\n            case \"name\":\n            setForm({...form,name:e.target.value}); \n            break;\n            default:\n            setForm({...form,Questions:e.target.value});\n\n        }\n    }\n    const editQuiz = (id,formData) => dispatch(editQuizById(id,formData));\n    const addNewQuiz = (inputData) => dispatch(addQuiz(inputData));\n\n    const handleChangeSubmit =(e)=>{\n        e.preventDefault()\n        isModif ? editQuiz(form._id,form):addNewQuiz(form)\n        setIsModif(false)\n    }\n\n\n    const handleChangeAdd =()=>{\n        setForm({\n            name:\"\",\n           category:\"\",\n           Questions:[] \n        })\n       setAddQuest(true)\n       setIsModif(false)\n    }\n\n    const removeQuestionByID =(id) => dispatch(removeQuiz(id))\n\n\n    const popover = (j) => (\n        <Popover id=\"popover-basic\">\n            <Popover.Title as=\"h3\">Difficulty : {form.Questions[j].difficulty}</Popover.Title>\n            <Popover.Content dangerouslySetInnerHTML={{__html:form.Questions[j].question}}>\n                \n            </Popover.Content>\n        </Popover>\n    );\n    return (\n        <Container className=\"question-container\">\n            <Row>\n                <Col sm={6} className=\"Details-container\">\n                    <div className=\"card my-1\">\n                        <div className=\"card-header\">\n                            <h5 className=\"card-title\">{!addQuest? \"Edit Quiz\":\"Add Quiz\"} </h5>\n                        </div>\n                        <div className=\"card-body\">\n                            <form className=\"row\">\n                                <div className=\"col-6 mb-2\">\n                                    <label className=\"form-label\">Quiz Name :</label>\n                                    <input type=\"text\" name=\"name\" className=\"form-control\"\n                                        value={form.name}\n                                        disabled={addQuest || isModif ?  false: true}\n                                        onChange={(e)=>handleChangeInput(e)}\n                                    />\n                                </div>\n                                <div className={addQuest ? \"d-none\" : \"col-4 mb-2\"}>\n                                    <label className=\"form-label\">Quiz ID :</label>\n                                    <input type=\"text\" name=\"_id\" className=\"form-control\"\n                                        value={form._id}\n                                        disabled={addQuest || isModif ? false : true}\n                                        onChange={(e)=>handleChangeInput(e)}\n                                    />\n                                </div>\n                            </form>\n\n                            <form className=\"row\">\n                                <div className=\"col-6\">\n                                    <label className=\"form-label\"> {isModif ? \"category:\" : \"category List:\"}</label>\n                                    <select name=\"category\" className=\"form-select mb-3\" value={form.category}\n                                                                onChange={(e)=>handleChangeInput(e)}\n                                                                disabled={addQuest || !isModif ?  false: true}\n                                                                >\n                                            <option>Open this select menu</option>\n                                            {\n                                                categoryList.map((el)=><option>{el}</option>)\n                                            }\n\n                                    </select>\n                                    \n                                </div>\n                            </form>\n                            <form className=\"row\">\n\n                            </form>\n                            <form className=\"Quizzes-container d-flex flex-wrap align-content-around justify-content-around\">\n                                {\n                                    form.Questions.map((question, j) => (<OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover(j)}>\n                                        <Button variant=\"success\">QUIESTION N° {j + 1} </Button>\n                                    </OverlayTrigger>))\n                                }\n\n                            </form>\n                            <form className=\"col-md-12 border-info d-flex justify-content-between mt-2\">\n                                    <button type=\"button\"   className=\"btn btn-outline-dark\"  \n                                                            onClick={handleChangeSubmit}\n                                                            >{addQuest? \"ADD\":\"UPDATE\"}</button>\n                                    <button type=\"button\"   className=\"btn btn-dark border-0 rounded-circle\"  \n                                                onClick={handleChangeAdd}\n                                                >\n                                                <FontAwesomeIcon size=\"1x\" icon={faPlusCircle}/>\n                                    </button>\n                            </form>\n                            \n                        </div>\n                    </div>\n                </Col>\n                <Col sm={6} className=\"list-container\">\n                    <Row className=\"Quizzes-table table-sm\">\n                        <table className=\"table my-2 w-100 h-50\" style={{ width: \"12rem\" }}>\n                            <thead className=\"thead-dark\">\n                                <tr >\n                                    <th scope=\"col\">#</th>\n                                    <th scope=\"col\">Quizzes</th>\n                                    <th scope=\"col\">Category</th>\n                                    <th scope=\"col\">Management</th>\n                                </tr>\n                            </thead>\n                            <tbody className=\"bg-light\">\n                                {\n                                    quizzes.map((quiz, i) => (\n                                        <tr>\n                                            <th scope=\"row\">{i + 1}</th>\n                                            <td>{quiz.name}</td>\n                                            <td>{quiz.category}</td>\n                                            <td className=\"d-flex justify-content-around\">\n                                                <button type=\"button\" className=\"btn btn-outline-danger rounded-circle\"\n                                                    onClick={()=>removeQuestionByID(quiz._id)}\n                                                ><FontAwesomeIcon icon={faTimesCircle} /></button>\n                                                <button type=\"button\" className=\"btn btn-outline-success rounded-circle\"\n                                                    onClick={() => handleChangeEdit(quiz._id)}\n                                                ><FontAwesomeIcon icon={faEdit} /></button>\n                                            </td>\n                                        </tr>\n                                    ))\n                                }\n                            </tbody>\n                        </table>\n                    </Row>\n                    <Row className=\"Quizzes-table table-sm\">\n                        <table className=\"table my-2 h-50 w-100 \">\n                            <thead className=\"thead-dark\">\n                                <tr >\n                                    <th scope=\"col\">#</th>\n                                    <th scope=\"col\">Question</th>\n                                    <th scope=\"col\">Difficulty</th>\n                                    <th scope=\"col\">Management</th>\n                                </tr>\n                            </thead>\n                            <tbody className=\"bg-light\">\n                                {\n                                    form.category===\"\"? null:\n                                    questionsFiltred.map((el, i) =>(\n                                        \n                                        <tr>\n                                            <th scope=\"row\" >{i + 1}</th>\n                                            <td dangerouslySetInnerHTML={{__html:el.question}}></td>\n                                            <td>{el.difficulty}</td>\n                                            <td className=\"d-flex justify-content-around\">\n                                                \n                                                <button type=\"button\" className=\"btn btn-outline-success rounded-circle\"\n                                                    onClick={() => handleChangeAddQuest(el._id)}\n                                                ><FontAwesomeIcon icon={faPlus} /></button>\n                                            </td>\n                                        </tr>\n                                    ))\n                                }\n\n                            </tbody>\n                        </table>\n                    </Row>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n","/home/mohamed/Documents/Big_Finally/client/src/Components/Admin Component/Views/Admin Profil Component/Adminprofil.js",[],"/home/mohamed/Documents/Big_Finally/client/src/Components/Admin Component/Views/Sign Up Component/Signup.js",[],"/home/mohamed/Documents/Big_Finally/client/src/js/actionType.js",[],"/home/mohamed/Documents/Big_Finally/client/src/Components/Admin Component/Views/Question Component/Tableitem.js",[],"/home/mohamed/Documents/Big_Finally/client/src/js/actions/quizaction.js",[],"/home/mohamed/Documents/Big_Finally/client/src/js/actions/questionaction.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":20,"column":11,"nodeType":"86","messageId":"87","endLine":20,"endColumn":20},{"ruleId":"88","severity":1,"message":"89","line":29,"column":6,"nodeType":"90","endLine":29,"endColumn":8,"suggestions":"91"},{"ruleId":"84","severity":1,"message":"85","line":26,"column":13,"nodeType":"86","messageId":"87","endLine":26,"endColumn":22},{"ruleId":"88","severity":1,"message":"92","line":43,"column":8,"nodeType":"90","endLine":43,"endColumn":10,"suggestions":"93"},{"ruleId":"88","severity":1,"message":"89","line":46,"column":8,"nodeType":"90","endLine":46,"endColumn":17,"suggestions":"94"},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'isLoading' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllQuestions'. Either include it or remove the dependency array.","ArrayExpression",["97"],"React Hook useEffect has a missing dependency: 'getAllQuizzes'. Either include it or remove the dependency array.",["98"],["99"],"no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},"Update the dependencies array to be: [getAllQuestions]",{"range":"106","text":"107"},"Update the dependencies array to be: [getAllQuizzes]",{"range":"108","text":"109"},"Update the dependencies array to be: [getAllQuestions, isModif]",{"range":"110","text":"111"},[978,980],"[getAllQuestions]",[1555,1557],"[getAllQuizzes]",[1614,1623],"[getAllQuestions, isModif]"]